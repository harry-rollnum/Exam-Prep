CS602PC: FORMAL LANGUAGES AND AUTOMATA THEORY

Course Objectives
 To provide introduction to some of the central ideas of theoretical computer science from the
perspective of formal languages.
 To introduce the fundamental concepts of formal languages, grammars and automata theory.
 Classify machines by their power to recognize languages.
 Employ finite state machines to solve problems in computing.
 To understand deterministic and non-deterministic machines.
 To understand the differences between decidability and undecidability.

Course Outcomes
 Understand the concept of abstract machines and their power to recognize the languages.
 Employ finite state machines for modeling and solving computing problems.
 Design context free grammars for formal languages.
 Distinguish between decidability and undecidability.

UNIT - I
Introduction to Finite Automata: Structural Representations, Automata and Complexity, the Central
Concepts of Automata Theory – Alphabets, Strings, Languages, Problems.
Nondeterministic Finite Automata: Formal Definition, an application, Text Search, Finite Automata
with Epsilon-Transitions.
Deterministic Finite Automata: Definition of DFA, How A DFA Process Strings, The language of DFA,
Conversion of NFA with €-transitions to NFA without €-transitions. Conversion of NFA to DFA, Moore
and Melay machines

UNIT - II
Regular Expressions: Finite Automata and Regular Expressions, Applications of Regular
Expressions, Algebraic Laws for Regular Expressions, Conversion of Finite Automata to Regular
Expressions.
Pumping Lemma for Regular Languages, Statement of the pumping lemma, Applications of the
Pumping Lemma.
Closure Properties of Regular Languages: Closure properties of Regular languages, Decision
Properties of Regular Languages, Equivalence and Minimization of Automata.

UNIT - III
Context-Free Grammars: Definition of Context-Free Grammars, Derivations Using a Grammar,
Leftmost and Rightmost Derivations, the Language of a Grammar, Sentential Forms, Parse Trees,
Applications of Context-Free Grammars, Ambiguity in Grammars and Languages.
Push Down Automata: Definition of the Pushdown Automaton, the Languages of a PDA, Equivalence
of PDA's and CFG's, Acceptance by final state, Acceptance by empty stack, Deterministic Pushdown
Automata. From CFG to PDA, From PDA to CFG.

UNIT - IV
Normal Forms for Context- Free Grammars: Eliminating useless symbols, Eliminating €-Productions.
Chomsky Normal form Greibach Normal form.
Pumping Lemma for Context-Free Languages: Statement of pumping lemma, Applications
Closure Properties of Context-Free Languages: Closure properties of CFL’s, Decision Properties of
CFL's Turing Machines: Introduction to Turing Machine, Formal Description, Instantaneous description,
The language of a Turing machine

UNIT - V
Types of Turing machine: Turing machines and halting
Undecidability: Undecidability, A Language that is Not Recursively Enumerable, An Undecidable
Problem That is RE, Undecidable Problems about Turing Machines, Recursive languages, Properties
of recursive languages, Post's Correspondence Problem, Modified Post Correspondence problem,
Other Undecidable Problems, Counter machines.

TEXT BOOKS:
1. Introduction to Automata Theory, Languages, and Computation, 3nd Edition, John E. Hopcroft,
Rajeev Motwani, Jeffrey D. Ullman, Pearson Education.
2. Theory of Computer Science – Automata languages and computation, Mishra and
Chandrashekaran, 2nd edition, PHI.

REFERENCE BOOKS:
1. Introduction to Languages and The Theory of Computation, John C Martin, TMH.
2. Introduction to Computer Theory, Daniel I.A. Cohen, John Wiley.
3. A Textbook on Automata Theory, P. K. Srimani, Nasir S. F. B, Cambridge University Press.
4. Introduction to the Theory of Computation, Michael Sipser, 3rd edition, Cengage Learning.
5. Introduction to Formal languages Automata Theory and Computation Kamala Krithivasan,Rama R, Pearson.